// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Criar uma Migration: yan prisma  migrate dev
// create-table-users
model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("user")
}

model Category {
  id String @id @default(uuid())
  name String
 
  created_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("categories")

  //1 - Relacionamento: 1-N (Categoria -> Produtos)
  products Product[]
}

model Product {
  id String @id @default(uuid())
  name String
  price String
  description String
  banner String
 
  created_at DateTime? @default(now())
  update_at DateTime? @default(now())

//2 - Relacionamento
  category Category @relation(fields: [category_id], references: [id])

  @@map("products")

  //3 - Relacionamento
  category_id String
  items Item[]
}

model Order{
   id String @id @default(uuid())
   table Int
   status Boolean @default(false)
   draft Boolean @default(true) //Rascunho
   name String?

  created_at DateTime? @default(now())
  update_at DateTime? @default(now())

    @@map("orders")
    items Item[]
}

model Item{
  id String @id @default(uuid())
  //Quantidade: 
  amount Int

  created_at DateTime? @default(now())
  update_at DateTime? @default(now())

   order Order @relation(fields: [order_id], references: [id])
   product Product @relation(fields: [product_id], references: [id])
  
   @@map("itens") 
   order_id String
   product_id String
}